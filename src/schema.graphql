# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type Mutation {
  createClient(
    firstName: String
    lastName: String
    cellPhone: String
    birthDay: DateTime
    image: String
  ): Client!
  updateClient(
    id: ID!
    firstName: String
    lastName: String
    cellPhone: String
    birthDay: DateTime
    image: String
  ): Client!
  deleteClient(id: ID!): Client
  signup(
    firstName: String!
    lastName: String!
    cellPhone: String!
    businessName: String!
    email: String!
    password: String!
    confirmPassword: String!
    plan: String!
  ): User!
  updateUser(
    cellPhone: String
    businessName: String
    email: String
    id: ID!
  ): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  updatePermissions(permissions: [Permission], userId: ID!): User
  removeFromCart(id: ID!): CartItem
  createOrder(token: String!, plan: String!, price: Int!): Order!
  createReason(
    name: String!
    defaultLength: Int
    provider: String
    color: String!
  ): Reason!
  deleteReason(id: ID!): Reason
  createAppointment(
    reason: String!
    provider: String
    date: DateTime!
    bookedBy: String
    note: String
    client: String!
  ): Appointment!
  createTextReminder(
    to: String!
    text: String!
    client: ID!
    confirmationStatus: String
    forDate: String!
    forTime: String!
  ): TextReminder!
  updateTextReminder(id: ID!): TextReminder!
  deleteTextReminder(id: ID!): TextReminder
}

type Query {
  client(id: ID!): Client
  clients(
    where: ClientWhereInput
    orderBy: ClientOrderByInput
    skip: Int
    first: Int
  ): [Client]!
  cartItem(id: ID!): CartItem
  cartItems(orderBy: CartItemOrderByInput): [CartItem]
  textTemplate(id: ID!): TextTemplate!
  textTemplates: [TextTemplate]!
  reason(id: ID!): Reason
  reasons(orderBy: ReasonOrderByInput): [Reason]
  clientsConnection(where: ClientWhereInput): ClientConnection!
  me: User
  users: [User]!
  order(id: ID!): Order
  orders(orderBy: OrderOrderByInput): [Order]!
  textReminders(client: ID!, orderBy: TextReminderOrderByInput): [TextReminder]!
}

type Subscription {
  textReminder: TextReminder
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  cellPhone: String!
  email: String!
  businessName: String!
  permissions: [Permission!]!
  plan: String!
  orders: [Order]
}

# type Client {
#   id: ID!
#   firstName: String!
#   lastName: String!
#   fullName: String!
#   dependantFirstName: String
#   dependantLastName: String
#   cellPhone: String!
#   birthDay: DateTime
#   image: String
#   user: User!
#   appointments: [Appointment]
# }
