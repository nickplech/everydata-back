# source: https://us1.prisma.sh/nick-plechas/perfectdayreminders/dev
# timestamp: Sat Feb 23 2019 02:26:46 GMT-0800 (PST)

type AggregateAppointment {
  count: Int!
}

type AggregateCartItem {
  count: Int!
}

type AggregateClient {
  count: Int!
}

type AggregateInboundMessage {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderPackage {
  count: Int!
}

type AggregateReason {
  count: Int!
}

type AggregateTextReminder {
  count: Int!
}

type AggregateTextTemplate {
  count: Int!
}

type AggregateTimeRange {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Appointment implements Node {
  id: ID!
  reason(where: ReasonWhereInput, orderBy: ReasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reason!]
  provider: [String!]!
  date: DateTime!
  timeRange: TimeRange!
  bookedBy: String
  note: String
  client(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client!]
  user: User!
}

"""A connection to a list of items."""
type AppointmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AppointmentEdge]!
  aggregate: AggregateAppointment!
}

input AppointmentCreateInput {
  date: DateTime!
  bookedBy: String
  note: String
  provider: AppointmentCreateproviderInput
  reason: ReasonCreateManyInput
  timeRange: TimeRangeCreateOneInput!
  client: ClientCreateManyInput
  user: UserCreateOneWithoutAppointmentsInput!
}

input AppointmentCreateManyWithoutUserInput {
  create: [AppointmentCreateWithoutUserInput!]
  connect: [AppointmentWhereUniqueInput!]
}

input AppointmentCreateproviderInput {
  set: [String!]
}

input AppointmentCreateWithoutUserInput {
  date: DateTime!
  bookedBy: String
  note: String
  provider: AppointmentCreateproviderInput
  reason: ReasonCreateManyInput
  timeRange: TimeRangeCreateOneInput!
  client: ClientCreateManyInput
}

"""An edge in a connection."""
type AppointmentEdge {
  """The item at the end of the edge."""
  node: Appointment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AppointmentOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  bookedBy_ASC
  bookedBy_DESC
  note_ASC
  note_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AppointmentPreviousValues {
  id: ID!
  provider: [String!]!
  date: DateTime!
  bookedBy: String
  note: String
}

input AppointmentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AppointmentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AppointmentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AppointmentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  bookedBy: String

  """All values that are not equal to given value."""
  bookedBy_not: String

  """All values that are contained in given list."""
  bookedBy_in: [String!]

  """All values that are not contained in given list."""
  bookedBy_not_in: [String!]

  """All values less than the given value."""
  bookedBy_lt: String

  """All values less than or equal the given value."""
  bookedBy_lte: String

  """All values greater than the given value."""
  bookedBy_gt: String

  """All values greater than or equal the given value."""
  bookedBy_gte: String

  """All values containing the given string."""
  bookedBy_contains: String

  """All values not containing the given string."""
  bookedBy_not_contains: String

  """All values starting with the given string."""
  bookedBy_starts_with: String

  """All values not starting with the given string."""
  bookedBy_not_starts_with: String

  """All values ending with the given string."""
  bookedBy_ends_with: String

  """All values not ending with the given string."""
  bookedBy_not_ends_with: String
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
}

type AppointmentSubscriptionPayload {
  mutation: MutationType!
  node: Appointment
  updatedFields: [String!]
  previousValues: AppointmentPreviousValues
}

input AppointmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AppointmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AppointmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AppointmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AppointmentWhereInput
}

input AppointmentUpdateInput {
  date: DateTime
  bookedBy: String
  note: String
  provider: AppointmentUpdateproviderInput
  reason: ReasonUpdateManyInput
  timeRange: TimeRangeUpdateOneRequiredInput
  client: ClientUpdateManyInput
  user: UserUpdateOneRequiredWithoutAppointmentsInput
}

input AppointmentUpdateManyDataInput {
  date: DateTime
  bookedBy: String
  note: String
  provider: AppointmentUpdateproviderInput
}

input AppointmentUpdateManyMutationInput {
  date: DateTime
  bookedBy: String
  note: String
  provider: AppointmentUpdateproviderInput
}

input AppointmentUpdateManyWithoutUserInput {
  create: [AppointmentCreateWithoutUserInput!]
  connect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  delete: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AppointmentUpdateManyWithWhereNestedInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutUserInput!]
}

input AppointmentUpdateManyWithWhereNestedInput {
  where: AppointmentScalarWhereInput!
  data: AppointmentUpdateManyDataInput!
}

input AppointmentUpdateproviderInput {
  set: [String!]
}

input AppointmentUpdateWithoutUserDataInput {
  date: DateTime
  bookedBy: String
  note: String
  provider: AppointmentUpdateproviderInput
  reason: ReasonUpdateManyInput
  timeRange: TimeRangeUpdateOneRequiredInput
  client: ClientUpdateManyInput
}

input AppointmentUpdateWithWhereUniqueWithoutUserInput {
  where: AppointmentWhereUniqueInput!
  data: AppointmentUpdateWithoutUserDataInput!
}

input AppointmentUpsertWithWhereUniqueWithoutUserInput {
  where: AppointmentWhereUniqueInput!
  update: AppointmentUpdateWithoutUserDataInput!
  create: AppointmentCreateWithoutUserInput!
}

input AppointmentWhereInput {
  """Logical AND on all given filters."""
  AND: [AppointmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [AppointmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AppointmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  bookedBy: String

  """All values that are not equal to given value."""
  bookedBy_not: String

  """All values that are contained in given list."""
  bookedBy_in: [String!]

  """All values that are not contained in given list."""
  bookedBy_not_in: [String!]

  """All values less than the given value."""
  bookedBy_lt: String

  """All values less than or equal the given value."""
  bookedBy_lte: String

  """All values greater than the given value."""
  bookedBy_gt: String

  """All values greater than or equal the given value."""
  bookedBy_gte: String

  """All values containing the given string."""
  bookedBy_contains: String

  """All values not containing the given string."""
  bookedBy_not_contains: String

  """All values starting with the given string."""
  bookedBy_starts_with: String

  """All values not starting with the given string."""
  bookedBy_not_starts_with: String

  """All values ending with the given string."""
  bookedBy_ends_with: String

  """All values not ending with the given string."""
  bookedBy_not_ends_with: String
  note: String

  """All values that are not equal to given value."""
  note_not: String

  """All values that are contained in given list."""
  note_in: [String!]

  """All values that are not contained in given list."""
  note_not_in: [String!]

  """All values less than the given value."""
  note_lt: String

  """All values less than or equal the given value."""
  note_lte: String

  """All values greater than the given value."""
  note_gt: String

  """All values greater than or equal the given value."""
  note_gte: String

  """All values containing the given string."""
  note_contains: String

  """All values not containing the given string."""
  note_not_contains: String

  """All values starting with the given string."""
  note_starts_with: String

  """All values not starting with the given string."""
  note_not_starts_with: String

  """All values ending with the given string."""
  note_ends_with: String

  """All values not ending with the given string."""
  note_not_ends_with: String
  reason_every: ReasonWhereInput
  reason_some: ReasonWhereInput
  reason_none: ReasonWhereInput
  timeRange: TimeRangeWhereInput
  client_every: ClientWhereInput
  client_some: ClientWhereInput
  client_none: ClientWhereInput
  user: UserWhereInput
}

input AppointmentWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type CartItem implements Node {
  id: ID!
  quantity: Int!
  client: Client
  user: User!
  date: DateTime
  confirmationStatus: ConfirmationStatus
}

"""A connection to a list of items."""
type CartItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CartItemEdge]!
  aggregate: AggregateCartItem!
}

input CartItemCreateInput {
  quantity: Int
  date: DateTime
  confirmationStatus: ConfirmationStatus
  client: ClientCreateOneInput
  user: UserCreateOneWithoutCartInput!
}

input CartItemCreateManyWithoutUserInput {
  create: [CartItemCreateWithoutUserInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartItemCreateWithoutUserInput {
  quantity: Int
  date: DateTime
  confirmationStatus: ConfirmationStatus
  client: ClientCreateOneInput
}

"""An edge in a connection."""
type CartItemEdge {
  """The item at the end of the edge."""
  node: CartItem!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CartItemOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  date_ASC
  date_DESC
  confirmationStatus_ASC
  confirmationStatus_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CartItemPreviousValues {
  id: ID!
  quantity: Int!
  date: DateTime
  confirmationStatus: ConfirmationStatus
}

input CartItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  confirmationStatus: ConfirmationStatus

  """All values that are not equal to given value."""
  confirmationStatus_not: ConfirmationStatus

  """All values that are contained in given list."""
  confirmationStatus_in: [ConfirmationStatus!]

  """All values that are not contained in given list."""
  confirmationStatus_not_in: [ConfirmationStatus!]
}

type CartItemSubscriptionPayload {
  mutation: MutationType!
  node: CartItem
  updatedFields: [String!]
  previousValues: CartItemPreviousValues
}

input CartItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CartItemWhereInput
}

input CartItemUpdateInput {
  quantity: Int
  date: DateTime
  confirmationStatus: ConfirmationStatus
  client: ClientUpdateOneInput
  user: UserUpdateOneRequiredWithoutCartInput
}

input CartItemUpdateManyDataInput {
  quantity: Int
  date: DateTime
  confirmationStatus: ConfirmationStatus
}

input CartItemUpdateManyMutationInput {
  quantity: Int
  date: DateTime
  confirmationStatus: ConfirmationStatus
}

input CartItemUpdateManyWithoutUserInput {
  create: [CartItemCreateWithoutUserInput!]
  connect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  disconnect: [CartItemWhereUniqueInput!]
  delete: [CartItemWhereUniqueInput!]
  update: [CartItemUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CartItemUpdateManyWithWhereNestedInput!]
  deleteMany: [CartItemScalarWhereInput!]
  upsert: [CartItemUpsertWithWhereUniqueWithoutUserInput!]
}

input CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput!
  data: CartItemUpdateManyDataInput!
}

input CartItemUpdateWithoutUserDataInput {
  quantity: Int
  date: DateTime
  confirmationStatus: ConfirmationStatus
  client: ClientUpdateOneInput
}

input CartItemUpdateWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateWithoutUserDataInput!
}

input CartItemUpsertWithWhereUniqueWithoutUserInput {
  where: CartItemWhereUniqueInput!
  update: CartItemUpdateWithoutUserDataInput!
  create: CartItemCreateWithoutUserInput!
}

input CartItemWhereInput {
  """Logical AND on all given filters."""
  AND: [CartItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [CartItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CartItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  confirmationStatus: ConfirmationStatus

  """All values that are not equal to given value."""
  confirmationStatus_not: ConfirmationStatus

  """All values that are contained in given list."""
  confirmationStatus_in: [ConfirmationStatus!]

  """All values that are not contained in given list."""
  confirmationStatus_not_in: [ConfirmationStatus!]
  client: ClientWhereInput
  user: UserWhereInput
}

input CartItemWhereUniqueInput {
  id: ID
}

type Client implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  dependantFirstName: String
  dependantLastName: String
  cellPhone: String!
  birthDay: DateTime
  image: String
  user: User!
}

"""A connection to a list of items."""
type ClientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClientEdge]!
  aggregate: AggregateClient!
}

input ClientCreateInput {
  firstName: String!
  lastName: String!
  dependantFirstName: String
  dependantLastName: String
  cellPhone: String!
  birthDay: DateTime
  image: String
  user: UserCreateOneInput!
}

input ClientCreateManyInput {
  create: [ClientCreateInput!]
  connect: [ClientWhereUniqueInput!]
}

input ClientCreateOneInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
}

"""An edge in a connection."""
type ClientEdge {
  """The item at the end of the edge."""
  node: Client!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClientOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  dependantFirstName_ASC
  dependantFirstName_DESC
  dependantLastName_ASC
  dependantLastName_DESC
  cellPhone_ASC
  cellPhone_DESC
  birthDay_ASC
  birthDay_DESC
  image_ASC
  image_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClientPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  dependantFirstName: String
  dependantLastName: String
  cellPhone: String!
  birthDay: DateTime
  image: String
}

input ClientScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  dependantFirstName: String

  """All values that are not equal to given value."""
  dependantFirstName_not: String

  """All values that are contained in given list."""
  dependantFirstName_in: [String!]

  """All values that are not contained in given list."""
  dependantFirstName_not_in: [String!]

  """All values less than the given value."""
  dependantFirstName_lt: String

  """All values less than or equal the given value."""
  dependantFirstName_lte: String

  """All values greater than the given value."""
  dependantFirstName_gt: String

  """All values greater than or equal the given value."""
  dependantFirstName_gte: String

  """All values containing the given string."""
  dependantFirstName_contains: String

  """All values not containing the given string."""
  dependantFirstName_not_contains: String

  """All values starting with the given string."""
  dependantFirstName_starts_with: String

  """All values not starting with the given string."""
  dependantFirstName_not_starts_with: String

  """All values ending with the given string."""
  dependantFirstName_ends_with: String

  """All values not ending with the given string."""
  dependantFirstName_not_ends_with: String
  dependantLastName: String

  """All values that are not equal to given value."""
  dependantLastName_not: String

  """All values that are contained in given list."""
  dependantLastName_in: [String!]

  """All values that are not contained in given list."""
  dependantLastName_not_in: [String!]

  """All values less than the given value."""
  dependantLastName_lt: String

  """All values less than or equal the given value."""
  dependantLastName_lte: String

  """All values greater than the given value."""
  dependantLastName_gt: String

  """All values greater than or equal the given value."""
  dependantLastName_gte: String

  """All values containing the given string."""
  dependantLastName_contains: String

  """All values not containing the given string."""
  dependantLastName_not_contains: String

  """All values starting with the given string."""
  dependantLastName_starts_with: String

  """All values not starting with the given string."""
  dependantLastName_not_starts_with: String

  """All values ending with the given string."""
  dependantLastName_ends_with: String

  """All values not ending with the given string."""
  dependantLastName_not_ends_with: String
  cellPhone: String

  """All values that are not equal to given value."""
  cellPhone_not: String

  """All values that are contained in given list."""
  cellPhone_in: [String!]

  """All values that are not contained in given list."""
  cellPhone_not_in: [String!]

  """All values less than the given value."""
  cellPhone_lt: String

  """All values less than or equal the given value."""
  cellPhone_lte: String

  """All values greater than the given value."""
  cellPhone_gt: String

  """All values greater than or equal the given value."""
  cellPhone_gte: String

  """All values containing the given string."""
  cellPhone_contains: String

  """All values not containing the given string."""
  cellPhone_not_contains: String

  """All values starting with the given string."""
  cellPhone_starts_with: String

  """All values not starting with the given string."""
  cellPhone_not_starts_with: String

  """All values ending with the given string."""
  cellPhone_ends_with: String

  """All values not ending with the given string."""
  cellPhone_not_ends_with: String
  birthDay: DateTime

  """All values that are not equal to given value."""
  birthDay_not: DateTime

  """All values that are contained in given list."""
  birthDay_in: [DateTime!]

  """All values that are not contained in given list."""
  birthDay_not_in: [DateTime!]

  """All values less than the given value."""
  birthDay_lt: DateTime

  """All values less than or equal the given value."""
  birthDay_lte: DateTime

  """All values greater than the given value."""
  birthDay_gt: DateTime

  """All values greater than or equal the given value."""
  birthDay_gte: DateTime
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
}

type ClientSubscriptionPayload {
  mutation: MutationType!
  node: Client
  updatedFields: [String!]
  previousValues: ClientPreviousValues
}

input ClientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClientWhereInput
}

input ClientUpdateDataInput {
  firstName: String
  lastName: String
  dependantFirstName: String
  dependantLastName: String
  cellPhone: String
  birthDay: DateTime
  image: String
  user: UserUpdateOneRequiredInput
}

input ClientUpdateInput {
  firstName: String
  lastName: String
  dependantFirstName: String
  dependantLastName: String
  cellPhone: String
  birthDay: DateTime
  image: String
  user: UserUpdateOneRequiredInput
}

input ClientUpdateManyDataInput {
  firstName: String
  lastName: String
  dependantFirstName: String
  dependantLastName: String
  cellPhone: String
  birthDay: DateTime
  image: String
}

input ClientUpdateManyInput {
  create: [ClientCreateInput!]
  connect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  disconnect: [ClientWhereUniqueInput!]
  delete: [ClientWhereUniqueInput!]
  update: [ClientUpdateWithWhereUniqueNestedInput!]
  updateMany: [ClientUpdateManyWithWhereNestedInput!]
  deleteMany: [ClientScalarWhereInput!]
  upsert: [ClientUpsertWithWhereUniqueNestedInput!]
}

input ClientUpdateManyMutationInput {
  firstName: String
  lastName: String
  dependantFirstName: String
  dependantLastName: String
  cellPhone: String
  birthDay: DateTime
  image: String
}

input ClientUpdateManyWithWhereNestedInput {
  where: ClientScalarWhereInput!
  data: ClientUpdateManyDataInput!
}

input ClientUpdateOneInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ClientUpdateDataInput
  upsert: ClientUpsertNestedInput
}

input ClientUpdateOneRequiredInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  update: ClientUpdateDataInput
  upsert: ClientUpsertNestedInput
}

input ClientUpdateWithWhereUniqueNestedInput {
  where: ClientWhereUniqueInput!
  data: ClientUpdateDataInput!
}

input ClientUpsertNestedInput {
  update: ClientUpdateDataInput!
  create: ClientCreateInput!
}

input ClientUpsertWithWhereUniqueNestedInput {
  where: ClientWhereUniqueInput!
  update: ClientUpdateDataInput!
  create: ClientCreateInput!
}

input ClientWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  dependantFirstName: String

  """All values that are not equal to given value."""
  dependantFirstName_not: String

  """All values that are contained in given list."""
  dependantFirstName_in: [String!]

  """All values that are not contained in given list."""
  dependantFirstName_not_in: [String!]

  """All values less than the given value."""
  dependantFirstName_lt: String

  """All values less than or equal the given value."""
  dependantFirstName_lte: String

  """All values greater than the given value."""
  dependantFirstName_gt: String

  """All values greater than or equal the given value."""
  dependantFirstName_gte: String

  """All values containing the given string."""
  dependantFirstName_contains: String

  """All values not containing the given string."""
  dependantFirstName_not_contains: String

  """All values starting with the given string."""
  dependantFirstName_starts_with: String

  """All values not starting with the given string."""
  dependantFirstName_not_starts_with: String

  """All values ending with the given string."""
  dependantFirstName_ends_with: String

  """All values not ending with the given string."""
  dependantFirstName_not_ends_with: String
  dependantLastName: String

  """All values that are not equal to given value."""
  dependantLastName_not: String

  """All values that are contained in given list."""
  dependantLastName_in: [String!]

  """All values that are not contained in given list."""
  dependantLastName_not_in: [String!]

  """All values less than the given value."""
  dependantLastName_lt: String

  """All values less than or equal the given value."""
  dependantLastName_lte: String

  """All values greater than the given value."""
  dependantLastName_gt: String

  """All values greater than or equal the given value."""
  dependantLastName_gte: String

  """All values containing the given string."""
  dependantLastName_contains: String

  """All values not containing the given string."""
  dependantLastName_not_contains: String

  """All values starting with the given string."""
  dependantLastName_starts_with: String

  """All values not starting with the given string."""
  dependantLastName_not_starts_with: String

  """All values ending with the given string."""
  dependantLastName_ends_with: String

  """All values not ending with the given string."""
  dependantLastName_not_ends_with: String
  cellPhone: String

  """All values that are not equal to given value."""
  cellPhone_not: String

  """All values that are contained in given list."""
  cellPhone_in: [String!]

  """All values that are not contained in given list."""
  cellPhone_not_in: [String!]

  """All values less than the given value."""
  cellPhone_lt: String

  """All values less than or equal the given value."""
  cellPhone_lte: String

  """All values greater than the given value."""
  cellPhone_gt: String

  """All values greater than or equal the given value."""
  cellPhone_gte: String

  """All values containing the given string."""
  cellPhone_contains: String

  """All values not containing the given string."""
  cellPhone_not_contains: String

  """All values starting with the given string."""
  cellPhone_starts_with: String

  """All values not starting with the given string."""
  cellPhone_not_starts_with: String

  """All values ending with the given string."""
  cellPhone_ends_with: String

  """All values not ending with the given string."""
  cellPhone_not_ends_with: String
  birthDay: DateTime

  """All values that are not equal to given value."""
  birthDay_not: DateTime

  """All values that are contained in given list."""
  birthDay_in: [DateTime!]

  """All values that are not contained in given list."""
  birthDay_not_in: [DateTime!]

  """All values less than the given value."""
  birthDay_lt: DateTime

  """All values less than or equal the given value."""
  birthDay_lte: DateTime

  """All values greater than the given value."""
  birthDay_gt: DateTime

  """All values greater than or equal the given value."""
  birthDay_gte: DateTime
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  user: UserWhereInput
}

input ClientWhereUniqueInput {
  id: ID
  cellPhone: String
}

enum ConfirmationStatus {
  UNCONFIRMED
  CONFIRMED
  CANCELED
}

scalar DateTime

type InboundMessage implements Node {
  id: ID!
  msisdn: String!
  to: String!
  text: String!
  type: String!
  keyword: String!
  messageTimeStamp: String!
  user: User!
  client: Client!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type InboundMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InboundMessageEdge]!
  aggregate: AggregateInboundMessage!
}

input InboundMessageCreateInput {
  msisdn: String!
  to: String!
  text: String!
  type: String!
  keyword: String!
  messageTimeStamp: String!
  user: UserCreateOneInput!
  client: ClientCreateOneInput!
}

"""An edge in a connection."""
type InboundMessageEdge {
  """The item at the end of the edge."""
  node: InboundMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InboundMessageOrderByInput {
  id_ASC
  id_DESC
  msisdn_ASC
  msisdn_DESC
  to_ASC
  to_DESC
  text_ASC
  text_DESC
  type_ASC
  type_DESC
  keyword_ASC
  keyword_DESC
  messageTimeStamp_ASC
  messageTimeStamp_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InboundMessagePreviousValues {
  id: ID!
  msisdn: String!
  to: String!
  text: String!
  type: String!
  keyword: String!
  messageTimeStamp: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InboundMessageSubscriptionPayload {
  mutation: MutationType!
  node: InboundMessage
  updatedFields: [String!]
  previousValues: InboundMessagePreviousValues
}

input InboundMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InboundMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InboundMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InboundMessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InboundMessageWhereInput
}

input InboundMessageUpdateInput {
  msisdn: String
  to: String
  text: String
  type: String
  keyword: String
  messageTimeStamp: String
  user: UserUpdateOneRequiredInput
  client: ClientUpdateOneRequiredInput
}

input InboundMessageUpdateManyMutationInput {
  msisdn: String
  to: String
  text: String
  type: String
  keyword: String
  messageTimeStamp: String
}

input InboundMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [InboundMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [InboundMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InboundMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  msisdn: String

  """All values that are not equal to given value."""
  msisdn_not: String

  """All values that are contained in given list."""
  msisdn_in: [String!]

  """All values that are not contained in given list."""
  msisdn_not_in: [String!]

  """All values less than the given value."""
  msisdn_lt: String

  """All values less than or equal the given value."""
  msisdn_lte: String

  """All values greater than the given value."""
  msisdn_gt: String

  """All values greater than or equal the given value."""
  msisdn_gte: String

  """All values containing the given string."""
  msisdn_contains: String

  """All values not containing the given string."""
  msisdn_not_contains: String

  """All values starting with the given string."""
  msisdn_starts_with: String

  """All values not starting with the given string."""
  msisdn_not_starts_with: String

  """All values ending with the given string."""
  msisdn_ends_with: String

  """All values not ending with the given string."""
  msisdn_not_ends_with: String
  to: String

  """All values that are not equal to given value."""
  to_not: String

  """All values that are contained in given list."""
  to_in: [String!]

  """All values that are not contained in given list."""
  to_not_in: [String!]

  """All values less than the given value."""
  to_lt: String

  """All values less than or equal the given value."""
  to_lte: String

  """All values greater than the given value."""
  to_gt: String

  """All values greater than or equal the given value."""
  to_gte: String

  """All values containing the given string."""
  to_contains: String

  """All values not containing the given string."""
  to_not_contains: String

  """All values starting with the given string."""
  to_starts_with: String

  """All values not starting with the given string."""
  to_not_starts_with: String

  """All values ending with the given string."""
  to_ends_with: String

  """All values not ending with the given string."""
  to_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  keyword: String

  """All values that are not equal to given value."""
  keyword_not: String

  """All values that are contained in given list."""
  keyword_in: [String!]

  """All values that are not contained in given list."""
  keyword_not_in: [String!]

  """All values less than the given value."""
  keyword_lt: String

  """All values less than or equal the given value."""
  keyword_lte: String

  """All values greater than the given value."""
  keyword_gt: String

  """All values greater than or equal the given value."""
  keyword_gte: String

  """All values containing the given string."""
  keyword_contains: String

  """All values not containing the given string."""
  keyword_not_contains: String

  """All values starting with the given string."""
  keyword_starts_with: String

  """All values not starting with the given string."""
  keyword_not_starts_with: String

  """All values ending with the given string."""
  keyword_ends_with: String

  """All values not ending with the given string."""
  keyword_not_ends_with: String
  messageTimeStamp: String

  """All values that are not equal to given value."""
  messageTimeStamp_not: String

  """All values that are contained in given list."""
  messageTimeStamp_in: [String!]

  """All values that are not contained in given list."""
  messageTimeStamp_not_in: [String!]

  """All values less than the given value."""
  messageTimeStamp_lt: String

  """All values less than or equal the given value."""
  messageTimeStamp_lte: String

  """All values greater than the given value."""
  messageTimeStamp_gt: String

  """All values greater than or equal the given value."""
  messageTimeStamp_gte: String

  """All values containing the given string."""
  messageTimeStamp_contains: String

  """All values not containing the given string."""
  messageTimeStamp_not_contains: String

  """All values starting with the given string."""
  messageTimeStamp_starts_with: String

  """All values not starting with the given string."""
  messageTimeStamp_not_starts_with: String

  """All values ending with the given string."""
  messageTimeStamp_ends_with: String

  """All values not ending with the given string."""
  messageTimeStamp_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  client: ClientWhereInput
}

input InboundMessageWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCartItem(data: CartItemCreateInput!): CartItem!
  createAppointment(data: AppointmentCreateInput!): Appointment!
  createTextReminder(data: TextReminderCreateInput!): TextReminder!
  createInboundMessage(data: InboundMessageCreateInput!): InboundMessage!
  createOrderPackage(data: OrderPackageCreateInput!): OrderPackage!
  createOrder(data: OrderCreateInput!): Order!
  createReason(data: ReasonCreateInput!): Reason!
  createTextTemplate(data: TextTemplateCreateInput!): TextTemplate!
  createClient(data: ClientCreateInput!): Client!
  createUser(data: UserCreateInput!): User!
  createTimeRange(data: TimeRangeCreateInput!): TimeRange!
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem
  updateAppointment(data: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment
  updateTextReminder(data: TextReminderUpdateInput!, where: TextReminderWhereUniqueInput!): TextReminder
  updateInboundMessage(data: InboundMessageUpdateInput!, where: InboundMessageWhereUniqueInput!): InboundMessage
  updateOrderPackage(data: OrderPackageUpdateInput!, where: OrderPackageWhereUniqueInput!): OrderPackage
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateReason(data: ReasonUpdateInput!, where: ReasonWhereUniqueInput!): Reason
  updateTextTemplate(data: TextTemplateUpdateInput!, where: TextTemplateWhereUniqueInput!): TextTemplate
  updateClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteTextReminder(where: TextReminderWhereUniqueInput!): TextReminder
  deleteInboundMessage(where: InboundMessageWhereUniqueInput!): InboundMessage
  deleteOrderPackage(where: OrderPackageWhereUniqueInput!): OrderPackage
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteReason(where: ReasonWhereUniqueInput!): Reason
  deleteTextTemplate(where: TextTemplateWhereUniqueInput!): TextTemplate
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteUser(where: UserWhereUniqueInput!): User
  upsertCartItem(where: CartItemWhereUniqueInput!, create: CartItemCreateInput!, update: CartItemUpdateInput!): CartItem!
  upsertAppointment(where: AppointmentWhereUniqueInput!, create: AppointmentCreateInput!, update: AppointmentUpdateInput!): Appointment!
  upsertTextReminder(where: TextReminderWhereUniqueInput!, create: TextReminderCreateInput!, update: TextReminderUpdateInput!): TextReminder!
  upsertInboundMessage(where: InboundMessageWhereUniqueInput!, create: InboundMessageCreateInput!, update: InboundMessageUpdateInput!): InboundMessage!
  upsertOrderPackage(where: OrderPackageWhereUniqueInput!, create: OrderPackageCreateInput!, update: OrderPackageUpdateInput!): OrderPackage!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertReason(where: ReasonWhereUniqueInput!, create: ReasonCreateInput!, update: ReasonUpdateInput!): Reason!
  upsertTextTemplate(where: TextTemplateWhereUniqueInput!, create: TextTemplateCreateInput!, update: TextTemplateUpdateInput!): TextTemplate!
  upsertClient(where: ClientWhereUniqueInput!, create: ClientCreateInput!, update: ClientUpdateInput!): Client!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyCartItems(data: CartItemUpdateManyMutationInput!, where: CartItemWhereInput): BatchPayload!
  updateManyAppointments(data: AppointmentUpdateManyMutationInput!, where: AppointmentWhereInput): BatchPayload!
  updateManyTextReminders(data: TextReminderUpdateManyMutationInput!, where: TextReminderWhereInput): BatchPayload!
  updateManyInboundMessages(data: InboundMessageUpdateManyMutationInput!, where: InboundMessageWhereInput): BatchPayload!
  updateManyOrderPackages(data: OrderPackageUpdateManyMutationInput!, where: OrderPackageWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyReasons(data: ReasonUpdateManyMutationInput!, where: ReasonWhereInput): BatchPayload!
  updateManyTextTemplates(data: TextTemplateUpdateManyMutationInput!, where: TextTemplateWhereInput): BatchPayload!
  updateManyClients(data: ClientUpdateManyMutationInput!, where: ClientWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyTimeRanges(data: TimeRangeUpdateManyMutationInput!, where: TimeRangeWhereInput): BatchPayload!
  deleteManyCartItems(where: CartItemWhereInput): BatchPayload!
  deleteManyAppointments(where: AppointmentWhereInput): BatchPayload!
  deleteManyTextReminders(where: TextReminderWhereInput): BatchPayload!
  deleteManyInboundMessages(where: InboundMessageWhereInput): BatchPayload!
  deleteManyOrderPackages(where: OrderPackageWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyReasons(where: ReasonWhereInput): BatchPayload!
  deleteManyTextTemplates(where: TextTemplateWhereInput): BatchPayload!
  deleteManyClients(where: ClientWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTimeRanges(where: TimeRangeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  plan: String!
  price: Int!
  user: User!
  charge: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  plan: String!
  price: Int!
  charge: String!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  plan_ASC
  plan_DESC
  price_ASC
  price_DESC
  charge_ASC
  charge_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OrderPackage implements Node {
  id: ID!
  title: String!
  description: String!
  image: String!
  price: Int!
  plan: String!
  quantity: Int!
  user: User
}

"""A connection to a list of items."""
type OrderPackageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderPackageEdge]!
  aggregate: AggregateOrderPackage!
}

input OrderPackageCreateInput {
  title: String!
  description: String!
  image: String!
  price: Int!
  plan: String!
  quantity: Int
  user: UserCreateOneInput
}

"""An edge in a connection."""
type OrderPackageEdge {
  """The item at the end of the edge."""
  node: OrderPackage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderPackageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  price_ASC
  price_DESC
  plan_ASC
  plan_DESC
  quantity_ASC
  quantity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPackagePreviousValues {
  id: ID!
  title: String!
  description: String!
  image: String!
  price: Int!
  plan: String!
  quantity: Int!
}

type OrderPackageSubscriptionPayload {
  mutation: MutationType!
  node: OrderPackage
  updatedFields: [String!]
  previousValues: OrderPackagePreviousValues
}

input OrderPackageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderPackageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderPackageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderPackageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderPackageWhereInput
}

input OrderPackageUpdateInput {
  title: String
  description: String
  image: String
  price: Int
  plan: String
  quantity: Int
  user: UserUpdateOneInput
}

input OrderPackageUpdateManyMutationInput {
  title: String
  description: String
  image: String
  price: Int
  plan: String
  quantity: Int
}

input OrderPackageWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderPackageWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderPackageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderPackageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  plan: String

  """All values that are not equal to given value."""
  plan_not: String

  """All values that are contained in given list."""
  plan_in: [String!]

  """All values that are not contained in given list."""
  plan_not_in: [String!]

  """All values less than the given value."""
  plan_lt: String

  """All values less than or equal the given value."""
  plan_lte: String

  """All values greater than the given value."""
  plan_gt: String

  """All values greater than or equal the given value."""
  plan_gte: String

  """All values containing the given string."""
  plan_contains: String

  """All values not containing the given string."""
  plan_not_contains: String

  """All values starting with the given string."""
  plan_starts_with: String

  """All values not starting with the given string."""
  plan_not_starts_with: String

  """All values ending with the given string."""
  plan_ends_with: String

  """All values not ending with the given string."""
  plan_not_ends_with: String
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  user: UserWhereInput
}

input OrderPackageWhereUniqueInput {
  id: ID
}

type OrderPreviousValues {
  id: ID!
  plan: String!
  price: Int!
  charge: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  plan: String
  price: Int
  charge: String
  user: UserUpdateOneRequiredInput
}

input OrderUpdateManyMutationInput {
  plan: String
  price: Int
  charge: String
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  plan: String

  """All values that are not equal to given value."""
  plan_not: String

  """All values that are contained in given list."""
  plan_in: [String!]

  """All values that are not contained in given list."""
  plan_not_in: [String!]

  """All values less than the given value."""
  plan_lt: String

  """All values less than or equal the given value."""
  plan_lte: String

  """All values greater than the given value."""
  plan_gt: String

  """All values greater than or equal the given value."""
  plan_gte: String

  """All values containing the given string."""
  plan_contains: String

  """All values not containing the given string."""
  plan_not_contains: String

  """All values starting with the given string."""
  plan_starts_with: String

  """All values not starting with the given string."""
  plan_not_starts_with: String

  """All values ending with the given string."""
  plan_ends_with: String

  """All values not ending with the given string."""
  plan_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  charge: String

  """All values that are not equal to given value."""
  charge_not: String

  """All values that are contained in given list."""
  charge_in: [String!]

  """All values that are not contained in given list."""
  charge_not_in: [String!]

  """All values less than the given value."""
  charge_lt: String

  """All values less than or equal the given value."""
  charge_lte: String

  """All values greater than the given value."""
  charge_gt: String

  """All values greater than or equal the given value."""
  charge_gte: String

  """All values containing the given string."""
  charge_contains: String

  """All values not containing the given string."""
  charge_not_contains: String

  """All values starting with the given string."""
  charge_starts_with: String

  """All values not starting with the given string."""
  charge_not_starts_with: String

  """All values ending with the given string."""
  charge_ends_with: String

  """All values not ending with the given string."""
  charge_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  CLIENTCREATE
  CLIENTUPDATE
  CLIENTDELETE
  HIPAA
  EXPRESS
  STANDARD
  PERMISSIONUPDATE
}

type Query {
  cartItems(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem]!
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment]!
  textReminders(where: TextReminderWhereInput, orderBy: TextReminderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextReminder]!
  inboundMessages(where: InboundMessageWhereInput, orderBy: InboundMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InboundMessage]!
  orderPackages(where: OrderPackageWhereInput, orderBy: OrderPackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderPackage]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  reasons(where: ReasonWhereInput, orderBy: ReasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reason]!
  textTemplates(where: TextTemplateWhereInput, orderBy: TextTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextTemplate]!
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  timeRanges(where: TimeRangeWhereInput, orderBy: TimeRangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeRange]!
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  textReminder(where: TextReminderWhereUniqueInput!): TextReminder
  inboundMessage(where: InboundMessageWhereUniqueInput!): InboundMessage
  orderPackage(where: OrderPackageWhereUniqueInput!): OrderPackage
  order(where: OrderWhereUniqueInput!): Order
  reason(where: ReasonWhereUniqueInput!): Reason
  textTemplate(where: TextTemplateWhereUniqueInput!): TextTemplate
  client(where: ClientWhereUniqueInput!): Client
  user(where: UserWhereUniqueInput!): User
  cartItemsConnection(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartItemConnection!
  appointmentsConnection(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppointmentConnection!
  textRemindersConnection(where: TextReminderWhereInput, orderBy: TextReminderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextReminderConnection!
  inboundMessagesConnection(where: InboundMessageWhereInput, orderBy: InboundMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InboundMessageConnection!
  orderPackagesConnection(where: OrderPackageWhereInput, orderBy: OrderPackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderPackageConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  reasonsConnection(where: ReasonWhereInput, orderBy: ReasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReasonConnection!
  textTemplatesConnection(where: TextTemplateWhereInput, orderBy: TextTemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextTemplateConnection!
  clientsConnection(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClientConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  timeRangesConnection(where: TimeRangeWhereInput, orderBy: TimeRangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeRangeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Reason implements Node {
  id: ID!
  name: String!
  description: String
  provider: String
  color: String!
  user: User!
}

"""A connection to a list of items."""
type ReasonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReasonEdge]!
  aggregate: AggregateReason!
}

input ReasonCreateInput {
  name: String!
  description: String
  provider: String
  color: String!
  user: UserCreateOneInput!
}

input ReasonCreateManyInput {
  create: [ReasonCreateInput!]
  connect: [ReasonWhereUniqueInput!]
}

"""An edge in a connection."""
type ReasonEdge {
  """The item at the end of the edge."""
  node: Reason!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReasonOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  provider_ASC
  provider_DESC
  color_ASC
  color_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ReasonPreviousValues {
  id: ID!
  name: String!
  description: String
  provider: String
  color: String!
}

input ReasonScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReasonScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReasonScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReasonScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  provider: String

  """All values that are not equal to given value."""
  provider_not: String

  """All values that are contained in given list."""
  provider_in: [String!]

  """All values that are not contained in given list."""
  provider_not_in: [String!]

  """All values less than the given value."""
  provider_lt: String

  """All values less than or equal the given value."""
  provider_lte: String

  """All values greater than the given value."""
  provider_gt: String

  """All values greater than or equal the given value."""
  provider_gte: String

  """All values containing the given string."""
  provider_contains: String

  """All values not containing the given string."""
  provider_not_contains: String

  """All values starting with the given string."""
  provider_starts_with: String

  """All values not starting with the given string."""
  provider_not_starts_with: String

  """All values ending with the given string."""
  provider_ends_with: String

  """All values not ending with the given string."""
  provider_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
}

type ReasonSubscriptionPayload {
  mutation: MutationType!
  node: Reason
  updatedFields: [String!]
  previousValues: ReasonPreviousValues
}

input ReasonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReasonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReasonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReasonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReasonWhereInput
}

input ReasonUpdateDataInput {
  name: String
  description: String
  provider: String
  color: String
  user: UserUpdateOneRequiredInput
}

input ReasonUpdateInput {
  name: String
  description: String
  provider: String
  color: String
  user: UserUpdateOneRequiredInput
}

input ReasonUpdateManyDataInput {
  name: String
  description: String
  provider: String
  color: String
}

input ReasonUpdateManyInput {
  create: [ReasonCreateInput!]
  connect: [ReasonWhereUniqueInput!]
  set: [ReasonWhereUniqueInput!]
  disconnect: [ReasonWhereUniqueInput!]
  delete: [ReasonWhereUniqueInput!]
  update: [ReasonUpdateWithWhereUniqueNestedInput!]
  updateMany: [ReasonUpdateManyWithWhereNestedInput!]
  deleteMany: [ReasonScalarWhereInput!]
  upsert: [ReasonUpsertWithWhereUniqueNestedInput!]
}

input ReasonUpdateManyMutationInput {
  name: String
  description: String
  provider: String
  color: String
}

input ReasonUpdateManyWithWhereNestedInput {
  where: ReasonScalarWhereInput!
  data: ReasonUpdateManyDataInput!
}

input ReasonUpdateWithWhereUniqueNestedInput {
  where: ReasonWhereUniqueInput!
  data: ReasonUpdateDataInput!
}

input ReasonUpsertWithWhereUniqueNestedInput {
  where: ReasonWhereUniqueInput!
  update: ReasonUpdateDataInput!
  create: ReasonCreateInput!
}

input ReasonWhereInput {
  """Logical AND on all given filters."""
  AND: [ReasonWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReasonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReasonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  provider: String

  """All values that are not equal to given value."""
  provider_not: String

  """All values that are contained in given list."""
  provider_in: [String!]

  """All values that are not contained in given list."""
  provider_not_in: [String!]

  """All values less than the given value."""
  provider_lt: String

  """All values less than or equal the given value."""
  provider_lte: String

  """All values greater than the given value."""
  provider_gt: String

  """All values greater than or equal the given value."""
  provider_gte: String

  """All values containing the given string."""
  provider_contains: String

  """All values not containing the given string."""
  provider_not_contains: String

  """All values starting with the given string."""
  provider_starts_with: String

  """All values not starting with the given string."""
  provider_not_starts_with: String

  """All values ending with the given string."""
  provider_ends_with: String

  """All values not ending with the given string."""
  provider_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  user: UserWhereInput
}

input ReasonWhereUniqueInput {
  id: ID
}

type Subscription {
  cartItem(where: CartItemSubscriptionWhereInput): CartItemSubscriptionPayload
  appointment(where: AppointmentSubscriptionWhereInput): AppointmentSubscriptionPayload
  textReminder(where: TextReminderSubscriptionWhereInput): TextReminderSubscriptionPayload
  inboundMessage(where: InboundMessageSubscriptionWhereInput): InboundMessageSubscriptionPayload
  orderPackage(where: OrderPackageSubscriptionWhereInput): OrderPackageSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  reason(where: ReasonSubscriptionWhereInput): ReasonSubscriptionPayload
  textTemplate(where: TextTemplateSubscriptionWhereInput): TextTemplateSubscriptionPayload
  client(where: ClientSubscriptionWhereInput): ClientSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  timeRange(where: TimeRangeSubscriptionWhereInput): TimeRangeSubscriptionPayload
}

type TextReminder implements Node {
  id: ID!
  from: String!
  to: String!
  textTemplate: TextTemplate!
  statusReportReq: Boolean
  confirmationStatus: ConfirmationStatus
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  client: Client!
}

"""A connection to a list of items."""
type TextReminderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TextReminderEdge]!
  aggregate: AggregateTextReminder!
}

input TextReminderCreateInput {
  from: String!
  to: String!
  statusReportReq: Boolean
  confirmationStatus: ConfirmationStatus
  textTemplate: TextTemplateCreateOneInput!
  user: UserCreateOneInput!
  client: ClientCreateOneInput!
}

"""An edge in a connection."""
type TextReminderEdge {
  """The item at the end of the edge."""
  node: TextReminder!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TextReminderOrderByInput {
  id_ASC
  id_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  statusReportReq_ASC
  statusReportReq_DESC
  confirmationStatus_ASC
  confirmationStatus_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TextReminderPreviousValues {
  id: ID!
  from: String!
  to: String!
  statusReportReq: Boolean
  confirmationStatus: ConfirmationStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextReminderSubscriptionPayload {
  mutation: MutationType!
  node: TextReminder
  updatedFields: [String!]
  previousValues: TextReminderPreviousValues
}

input TextReminderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TextReminderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TextReminderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TextReminderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TextReminderWhereInput
}

input TextReminderUpdateInput {
  from: String
  to: String
  statusReportReq: Boolean
  confirmationStatus: ConfirmationStatus
  textTemplate: TextTemplateUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  client: ClientUpdateOneRequiredInput
}

input TextReminderUpdateManyMutationInput {
  from: String
  to: String
  statusReportReq: Boolean
  confirmationStatus: ConfirmationStatus
}

input TextReminderWhereInput {
  """Logical AND on all given filters."""
  AND: [TextReminderWhereInput!]

  """Logical OR on all given filters."""
  OR: [TextReminderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TextReminderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  from: String

  """All values that are not equal to given value."""
  from_not: String

  """All values that are contained in given list."""
  from_in: [String!]

  """All values that are not contained in given list."""
  from_not_in: [String!]

  """All values less than the given value."""
  from_lt: String

  """All values less than or equal the given value."""
  from_lte: String

  """All values greater than the given value."""
  from_gt: String

  """All values greater than or equal the given value."""
  from_gte: String

  """All values containing the given string."""
  from_contains: String

  """All values not containing the given string."""
  from_not_contains: String

  """All values starting with the given string."""
  from_starts_with: String

  """All values not starting with the given string."""
  from_not_starts_with: String

  """All values ending with the given string."""
  from_ends_with: String

  """All values not ending with the given string."""
  from_not_ends_with: String
  to: String

  """All values that are not equal to given value."""
  to_not: String

  """All values that are contained in given list."""
  to_in: [String!]

  """All values that are not contained in given list."""
  to_not_in: [String!]

  """All values less than the given value."""
  to_lt: String

  """All values less than or equal the given value."""
  to_lte: String

  """All values greater than the given value."""
  to_gt: String

  """All values greater than or equal the given value."""
  to_gte: String

  """All values containing the given string."""
  to_contains: String

  """All values not containing the given string."""
  to_not_contains: String

  """All values starting with the given string."""
  to_starts_with: String

  """All values not starting with the given string."""
  to_not_starts_with: String

  """All values ending with the given string."""
  to_ends_with: String

  """All values not ending with the given string."""
  to_not_ends_with: String
  statusReportReq: Boolean

  """All values that are not equal to given value."""
  statusReportReq_not: Boolean
  confirmationStatus: ConfirmationStatus

  """All values that are not equal to given value."""
  confirmationStatus_not: ConfirmationStatus

  """All values that are contained in given list."""
  confirmationStatus_in: [ConfirmationStatus!]

  """All values that are not contained in given list."""
  confirmationStatus_not_in: [ConfirmationStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  textTemplate: TextTemplateWhereInput
  user: UserWhereInput
  client: ClientWhereInput
}

input TextReminderWhereUniqueInput {
  id: ID
}

type TextTemplate implements Node {
  id: ID!
  name: String!
  content: String!
  customVariable: String
  dateVariable: DateTime
  timeVariable: DateTime
}

"""A connection to a list of items."""
type TextTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TextTemplateEdge]!
  aggregate: AggregateTextTemplate!
}

input TextTemplateCreateInput {
  name: String!
  content: String!
  customVariable: String
  dateVariable: DateTime
  timeVariable: DateTime
}

input TextTemplateCreateOneInput {
  create: TextTemplateCreateInput
  connect: TextTemplateWhereUniqueInput
}

"""An edge in a connection."""
type TextTemplateEdge {
  """The item at the end of the edge."""
  node: TextTemplate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TextTemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  content_ASC
  content_DESC
  customVariable_ASC
  customVariable_DESC
  dateVariable_ASC
  dateVariable_DESC
  timeVariable_ASC
  timeVariable_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TextTemplatePreviousValues {
  id: ID!
  name: String!
  content: String!
  customVariable: String
  dateVariable: DateTime
  timeVariable: DateTime
}

type TextTemplateSubscriptionPayload {
  mutation: MutationType!
  node: TextTemplate
  updatedFields: [String!]
  previousValues: TextTemplatePreviousValues
}

input TextTemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TextTemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TextTemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TextTemplateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TextTemplateWhereInput
}

input TextTemplateUpdateDataInput {
  name: String
  content: String
  customVariable: String
  dateVariable: DateTime
  timeVariable: DateTime
}

input TextTemplateUpdateInput {
  name: String
  content: String
  customVariable: String
  dateVariable: DateTime
  timeVariable: DateTime
}

input TextTemplateUpdateManyMutationInput {
  name: String
  content: String
  customVariable: String
  dateVariable: DateTime
  timeVariable: DateTime
}

input TextTemplateUpdateOneRequiredInput {
  create: TextTemplateCreateInput
  connect: TextTemplateWhereUniqueInput
  update: TextTemplateUpdateDataInput
  upsert: TextTemplateUpsertNestedInput
}

input TextTemplateUpsertNestedInput {
  update: TextTemplateUpdateDataInput!
  create: TextTemplateCreateInput!
}

input TextTemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [TextTemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [TextTemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TextTemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  customVariable: String

  """All values that are not equal to given value."""
  customVariable_not: String

  """All values that are contained in given list."""
  customVariable_in: [String!]

  """All values that are not contained in given list."""
  customVariable_not_in: [String!]

  """All values less than the given value."""
  customVariable_lt: String

  """All values less than or equal the given value."""
  customVariable_lte: String

  """All values greater than the given value."""
  customVariable_gt: String

  """All values greater than or equal the given value."""
  customVariable_gte: String

  """All values containing the given string."""
  customVariable_contains: String

  """All values not containing the given string."""
  customVariable_not_contains: String

  """All values starting with the given string."""
  customVariable_starts_with: String

  """All values not starting with the given string."""
  customVariable_not_starts_with: String

  """All values ending with the given string."""
  customVariable_ends_with: String

  """All values not ending with the given string."""
  customVariable_not_ends_with: String
  dateVariable: DateTime

  """All values that are not equal to given value."""
  dateVariable_not: DateTime

  """All values that are contained in given list."""
  dateVariable_in: [DateTime!]

  """All values that are not contained in given list."""
  dateVariable_not_in: [DateTime!]

  """All values less than the given value."""
  dateVariable_lt: DateTime

  """All values less than or equal the given value."""
  dateVariable_lte: DateTime

  """All values greater than the given value."""
  dateVariable_gt: DateTime

  """All values greater than or equal the given value."""
  dateVariable_gte: DateTime
  timeVariable: DateTime

  """All values that are not equal to given value."""
  timeVariable_not: DateTime

  """All values that are contained in given list."""
  timeVariable_in: [DateTime!]

  """All values that are not contained in given list."""
  timeVariable_not_in: [DateTime!]

  """All values less than the given value."""
  timeVariable_lt: DateTime

  """All values less than or equal the given value."""
  timeVariable_lte: DateTime

  """All values greater than the given value."""
  timeVariable_gt: DateTime

  """All values greater than or equal the given value."""
  timeVariable_gte: DateTime
}

input TextTemplateWhereUniqueInput {
  id: ID
}

type TimeRange {
  start: Int!
  end: Int!
  isInPast: Boolean!
}

"""A connection to a list of items."""
type TimeRangeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeRangeEdge]!
  aggregate: AggregateTimeRange!
}

input TimeRangeCreateInput {
  start: Int!
  end: Int!
  isInPast: Boolean!
}

input TimeRangeCreateOneInput {
  create: TimeRangeCreateInput
}

"""An edge in a connection."""
type TimeRangeEdge {
  """The item at the end of the edge."""
  node: TimeRange!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeRangeOrderByInput {
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  isInPast_ASC
  isInPast_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TimeRangePreviousValues {
  start: Int!
  end: Int!
  isInPast: Boolean!
}

type TimeRangeSubscriptionPayload {
  mutation: MutationType!
  node: TimeRange
  updatedFields: [String!]
  previousValues: TimeRangePreviousValues
}

input TimeRangeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeRangeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeRangeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeRangeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeRangeWhereInput
}

input TimeRangeUpdateDataInput {
  start: Int
  end: Int
  isInPast: Boolean
}

input TimeRangeUpdateManyMutationInput {
  start: Int
  end: Int
  isInPast: Boolean
}

input TimeRangeUpdateOneRequiredInput {
  create: TimeRangeCreateInput
  update: TimeRangeUpdateDataInput
  upsert: TimeRangeUpsertNestedInput
}

input TimeRangeUpsertNestedInput {
  update: TimeRangeUpdateDataInput!
  create: TimeRangeCreateInput!
}

input TimeRangeWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeRangeWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeRangeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeRangeWhereInput!]
  start: Int

  """All values that are not equal to given value."""
  start_not: Int

  """All values that are contained in given list."""
  start_in: [Int!]

  """All values that are not contained in given list."""
  start_not_in: [Int!]

  """All values less than the given value."""
  start_lt: Int

  """All values less than or equal the given value."""
  start_lte: Int

  """All values greater than the given value."""
  start_gt: Int

  """All values greater than or equal the given value."""
  start_gte: Int
  end: Int

  """All values that are not equal to given value."""
  end_not: Int

  """All values that are contained in given list."""
  end_in: [Int!]

  """All values that are not contained in given list."""
  end_not_in: [Int!]

  """All values less than the given value."""
  end_lt: Int

  """All values less than or equal the given value."""
  end_lte: Int

  """All values greater than the given value."""
  end_gt: Int

  """All values greater than or equal the given value."""
  end_gte: Int
  isInPast: Boolean

  """All values that are not equal to given value."""
  isInPast_not: Boolean
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  cellPhone: String!
  email: String!
  businessName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  appointments(where: AppointmentWhereInput, orderBy: AppointmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Appointment!]
  cart(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem!]
  plan: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  cellPhone: String!
  email: String!
  businessName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  plan: String!
  permissions: UserCreatepermissionsInput
  appointments: AppointmentCreateManyWithoutUserInput
  cart: CartItemCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutAppointmentsInput {
  firstName: String!
  lastName: String!
  cellPhone: String!
  email: String!
  businessName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  plan: String!
  permissions: UserCreatepermissionsInput
  cart: CartItemCreateManyWithoutUserInput
}

input UserCreateWithoutCartInput {
  firstName: String!
  lastName: String!
  cellPhone: String!
  email: String!
  businessName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  plan: String!
  permissions: UserCreatepermissionsInput
  appointments: AppointmentCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  cellPhone_ASC
  cellPhone_DESC
  email_ASC
  email_DESC
  businessName_ASC
  businessName_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  plan_ASC
  plan_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  cellPhone: String!
  email: String!
  businessName: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  plan: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  cellPhone: String
  email: String
  businessName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  plan: String
  permissions: UserUpdatepermissionsInput
  appointments: AppointmentUpdateManyWithoutUserInput
  cart: CartItemUpdateManyWithoutUserInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  cellPhone: String
  email: String
  businessName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  plan: String
  permissions: UserUpdatepermissionsInput
  appointments: AppointmentUpdateManyWithoutUserInput
  cart: CartItemUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  cellPhone: String
  email: String
  businessName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  plan: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutAppointmentsInput {
  create: UserCreateWithoutAppointmentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAppointmentsDataInput
  upsert: UserUpsertWithoutAppointmentsInput
}

input UserUpdateOneRequiredWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutAppointmentsDataInput {
  firstName: String
  lastName: String
  cellPhone: String
  email: String
  businessName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  plan: String
  permissions: UserUpdatepermissionsInput
  cart: CartItemUpdateManyWithoutUserInput
}

input UserUpdateWithoutCartDataInput {
  firstName: String
  lastName: String
  cellPhone: String
  email: String
  businessName: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  plan: String
  permissions: UserUpdatepermissionsInput
  appointments: AppointmentUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAppointmentsInput {
  update: UserUpdateWithoutAppointmentsDataInput!
  create: UserCreateWithoutAppointmentsInput!
}

input UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput!
  create: UserCreateWithoutCartInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  cellPhone: String

  """All values that are not equal to given value."""
  cellPhone_not: String

  """All values that are contained in given list."""
  cellPhone_in: [String!]

  """All values that are not contained in given list."""
  cellPhone_not_in: [String!]

  """All values less than the given value."""
  cellPhone_lt: String

  """All values less than or equal the given value."""
  cellPhone_lte: String

  """All values greater than the given value."""
  cellPhone_gt: String

  """All values greater than or equal the given value."""
  cellPhone_gte: String

  """All values containing the given string."""
  cellPhone_contains: String

  """All values not containing the given string."""
  cellPhone_not_contains: String

  """All values starting with the given string."""
  cellPhone_starts_with: String

  """All values not starting with the given string."""
  cellPhone_not_starts_with: String

  """All values ending with the given string."""
  cellPhone_ends_with: String

  """All values not ending with the given string."""
  cellPhone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  businessName: String

  """All values that are not equal to given value."""
  businessName_not: String

  """All values that are contained in given list."""
  businessName_in: [String!]

  """All values that are not contained in given list."""
  businessName_not_in: [String!]

  """All values less than the given value."""
  businessName_lt: String

  """All values less than or equal the given value."""
  businessName_lte: String

  """All values greater than the given value."""
  businessName_gt: String

  """All values greater than or equal the given value."""
  businessName_gte: String

  """All values containing the given string."""
  businessName_contains: String

  """All values not containing the given string."""
  businessName_not_contains: String

  """All values starting with the given string."""
  businessName_starts_with: String

  """All values not starting with the given string."""
  businessName_not_starts_with: String

  """All values ending with the given string."""
  businessName_ends_with: String

  """All values not ending with the given string."""
  businessName_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  plan: String

  """All values that are not equal to given value."""
  plan_not: String

  """All values that are contained in given list."""
  plan_in: [String!]

  """All values that are not contained in given list."""
  plan_not_in: [String!]

  """All values less than the given value."""
  plan_lt: String

  """All values less than or equal the given value."""
  plan_lte: String

  """All values greater than the given value."""
  plan_gt: String

  """All values greater than or equal the given value."""
  plan_gte: String

  """All values containing the given string."""
  plan_contains: String

  """All values not containing the given string."""
  plan_not_contains: String

  """All values starting with the given string."""
  plan_starts_with: String

  """All values not starting with the given string."""
  plan_not_starts_with: String

  """All values ending with the given string."""
  plan_ends_with: String

  """All values not ending with the given string."""
  plan_not_ends_with: String
  appointments_every: AppointmentWhereInput
  appointments_some: AppointmentWhereInput
  appointments_none: AppointmentWhereInput
  cart_every: CartItemWhereInput
  cart_some: CartItemWhereInput
  cart_none: CartItemWhereInput
}

input UserWhereUniqueInput {
  id: ID
  cellPhone: String
  email: String
}
